/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/box": {
    /**
     * List all boxes
     * @description List all boxes
     */
    get: operations["box/list"];
  };
  "/content": {
    /**
     * List all content
     * @description List all content
     */
    get: operations["content/list"];
    /**
     * Create a content piece
     * @description Create an content piece
     */
    post: operations["content/create"];
  };
  "/content/{slug_or_id}": {
    /**
     * Get Content Piece
     * @description Get Content Piece
     */
    get: operations["content/get"];
  };
  "/content/{content_id}": {
    /**
     * Update Content Piece
     * @description Update Content Piece
     */
    post: operations["content/update"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Group content inside a box */
    Box: {
      id: string;
      slug: string;
      creator: string;
      deleted: boolean;
    };
    /** @description Box paginated response */
    BoxPage: {
      /** @description next cursor */
      next: string | null;
      /** @description list of results */
      results: components["schemas"]["Box"][];
    };
    /** @description A piece of content */
    Content: {
      /** @description content identifier */
      id: string;
      /** @description content box used to group */
      box: string;
      /** @description Unique slug for this content piece */
      slug: string;
      /** @description Publishing status of this content */
      status: "public" | "private";
      /** @description Title of the content piece, not restricted in length */
      title: string;
      /** @description Title with a max length of 150 characters designed for lists */
      title_short: string;
      /** @description Short description */
      subtitle: string;
      /** @description The content data. Depends on query parameter to be included. Can be HTML, plain text, JSX, etc. */
      data?: string;
      /**
       * @description Content language
       * @default en
       */
      lang: string;
      /** @description Creation date of this content */
      date: string;
      /** @description categories for this post */
      categories: string[];
      /** @description authors in this post as github users */
      authors: string[];
      modeldata: {
        [key: string]: unknown;
      };
    };
    /** @description Content paginated response */
    ContentPage: {
      /** @description next cursor */
      next: string | null;
      /** @description list of results */
      results: components["schemas"]["Content"][];
    };
    ContentUpdate: {
      /** @description Unique slug for this content piece */
      slug?: string;
      /** @description Title of the content piece, not restricted in length */
      title?: string;
      /** @description Title with a max length of 150 characters designed for lists */
      title_short?: string;
      /** @description Short description */
      subtitle?: string;
      /** @description Publishing status of this content */
      status?: "public" | "private";
      /** @description The content data. Can be HTML, plain text, JSX, etc. */
      data?: string;
      /** @description Content language */
      lang?: string;
      /** @description categories for this post */
      categories?: string[];
      /** @description authors in this post as github users */
      authors?: string[];
      modeldata?: {
        [key: string]: unknown;
      };
    };
    /** @description Create a content object */
    ContentCreate: {
      /** @description Unique slug for this content piece */
      slug: string;
      /** @description Title of the content piece, not restricted in length */
      title: string;
      /** @description Title with a max length of 150 characters designed for lists */
      title_short?: string;
      /** @description Short description */
      subtitle?: string;
      /** @description The content data. Can be HTML, plain text, JSX, etc. */
      data: string;
      /** @description The creation date of the content */
      date?: string;
      /**
       * @description Content language
       * @default en
       */
      lang?: string;
      /** @description box identifier */
      box?: string;
      modeldata?: {
        [key: string]: unknown;
      };
      /** @description categories for this post */
      categories?: string[];
      /** @description authors in this post as github users */
      authors?: string[];
    };
    ContentQuery: {
      /** @description Start from this cursor */
      next?: string;
      /** @description Start from this cursor */
      cursor?: string;
      /** @description Size of the results array */
      pageSize?: number;
    } & ({
      /** @description filter activities by box */
      box?: string;
      /**
       * @description include data when listing content
       * @default false
       */
      include_data?: boolean;
      /** @description Id of content in display will be excluded */
      context_content_id?: string;
      /** @description Publishing status of this content */
      status?: "public" | "private";
      /** @description Filter by selected categories */
      categories?: string[];
    });
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: {
    /**
     * @description Account user pool
     * @example core
     */
    "x-account-id": string;
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List all boxes
   * @description List all boxes
   */
  "box/list": {
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": components["schemas"]["BoxPage"];
        };
      };
    };
  };
  /**
   * List all content
   * @description List all content
   */
  "content/list": {
    parameters: {
      query?: {
        /** @description Start from this cursor */
        next?: string;
        /** @description Start from this cursor */
        cursor?: string;
        /** @description Size of the results array */
        pageSize?: number;
        /** @description filter activities by box */
        box?: string;
        /** @description include data when listing content */
        include_data?: boolean;
        /** @description Id of content in display will be excluded */
        context_content_id?: string;
        /** @description Publishing status of this content */
        status?: "public" | "private";
        /** @description Filter by selected categories */
        categories?: string[];
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": components["schemas"]["ContentPage"];
        };
      };
    };
  };
  /**
   * Create a content piece
   * @description Create an content piece
   */
  "content/create": {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ContentCreate"];
      };
    };
    responses: {
      /** @description Default Response */
      201: {
        content: {
          "application/json": components["schemas"]["Content"];
        };
      };
    };
  };
  /**
   * Get Content Piece
   * @description Get Content Piece
   */
  "content/get": {
    parameters: {
      query?: {
        mode?: "slug" | "id";
        box?: string;
        /** @description Include content data */
        include_data?: boolean;
      };
      path: {
        slug_or_id: string;
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": components["schemas"]["Content"];
        };
      };
    };
  };
  /**
   * Update Content Piece
   * @description Update Content Piece
   */
  "content/update": {
    parameters: {
      path: {
        content_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ContentUpdate"];
      };
    };
    responses: {
      /** @description Default Response */
      200: {
        content: {
          "application/json": components["schemas"]["Content"];
        };
      };
    };
  };
}
